#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include "keymap_colemak.h"

#define QWERTY 0
#define NUM 1
#define SYM 2
#define NAV 3

#define L_KEYS 0 1 2 3 4 5 12  13  14  15  16  17 24  25  26  27  28  29
#define R_KEYS 6 7 8 9 10 11 18  19  20  21  22  23 30  31  32  33  34  35
#define THUMBS 36 37 38 39 40 41

&lt {
  tapping-term-ms = <170>;
  quick_tap_ms = <150>;
  flavor = "tap-preferred";
};

&mt {
  tapping-term-ms = <170>;
  compatible = "zmk,behavior-hold-tap";
  #binding-cells = <2>;
  quick-tap-ms = <150>;
  flavor = "tap-preferred";
};

&caps_word {
    /delete-property/ ignore-modifiers;
    continue-list = <UNDERSCORE MINUS Y>;
};

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
  };

  behaviors {
        lhm: left_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <R_KEYS THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        rhm: right_home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <L_KEYS THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };
    };

  macros {
        dup: dup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp DOT &kp DOT &kp FSLH>
                ;
        };
    };

  keymap {
        compatible = "zmk,keymap";

                default_layer {
// /--------------------------------------------------------------\       /-------------------------------------------------------------\
// |   ESC        |    Q    |    W   |   E    |    R    |    T    |       |    Y    |    U    |    I    |    O    |     P    |    \     |
// |--------------+---------+--------+--------+---------+---------|       |---------+---------+---------+---------+----------+----------|
// |   CAPSLCK    |    A    |    S   |   D    |    F    |    G    |       |    H    |    J    |    K    |    L    |     ;    |     '    |
// |--------------+---------+--------+--------+---------+---------|       |---------+---------+---------+---------+----------+----------|
// |   ALT        |    Z    |    X   |   C    |    V    |    B    |       |    N    |    M    |    ,    |    .    |     /    | ` | ALT  |
// \---------------------------------+--------+---------+---------+       |---------+---------+---------+-------------------------------/
//                                   | NUM/TAB|   SPC   | NAV/ESC |       | NAV/ENT |   SPC   | NUM/BSPC|
//                                   \--------+---------+---------/       \---------+---------+---------/

//                         bindings = <
//    &kp GRAVE   &lhm RALT Q   &kp W         &kp E         &kp R         &kp T            &kp Y    &kp U        &kp I         &kp O           &rhm RALT P     &kp LBKT
//    &kp CLCK    &lt SYM A     &lhm LALT S   &lhm LSFT D   &lhm LCTL F   &kp G            &kp H    &rhm RCTL J  &rhm RSFT K   &rhm LALT L     &lt SYM SEMI    &kp SQT
//    &kp LALT    &lhm LGUI Z   &kp X         &kp C         &kp V         &kp B            &kp N    &kp M        &kp COMMA     &kp DOT         &rhm LGUI FSLH  &kp BSLH
//                                            &lt NUM TAB   &kp SPACE     &lt NAV ESC      &kp RET  &kp SPACE    &lt NUM BSPC
//                         >;


                        bindings = <
   &kp GRAVE   &lhm RALT Q  &kp W         &kp E         &kp R            &kp T            &kp Y    &kp U            &kp I         &kp O           &rhm RALT P     &kp LBKT
   &kp CLCK    &lt SYM A    &lhm LALT S   &lhm LSFT D   &lhm LCTL F      &kp G            &kp H    &rhm RCTL J      &rhm RSFT K   &rhm LALT L     &lt SYM SEMI    &kp SQT
   &kp LALT    &lhm LGUI Z  &kp X         &kp C         &kp V            &kp B            &kp N    &kp M            &kp COMMA     &kp DOT         &rhm LGUI FSLH  &kp BSLH
                                          &lt NUM TAB   &lhm LSFT SPACE  &lt NAV ESC      &kp RET  &rhm RSFT SPACE  &lt NUM BSPC
                        >;
                };

                num_layer {
// /--------------------------------------------------------------\       /-----------------------------------------------------------\
// |              |    F12   |    F7  |   F8   |   F9   |    x    |       |   +   |    7    |    8    |    9    |     *    |          |
// |--------------+----------+--------+--------+--------+---------|       |-------+---------+---------+---------+----------+----------|
// |              |    F11   |    F1  |   F2   |   F3   |    x    |       |   0   |    1    |    2    |    3    |     /    |          |
// |--------------+----------+--------+--------+--------+---------|       |-------+---------+---------+---------+----------+----------|
// |              |    F10   |    F4  |   F5   |   F6   |    x    |       |   -   |    4    |    5    |    6    |     .    |          |
// \----------------------------------+--------+--------+---------+       |-------+---------+---------+-------------------------------/
//                                   |        |         |         |       |       |         |         |
//                                   \--------+---------+---------/       \-------+---------+---------/
//                         bindings = <
//    &trans   &kp F12         &kp F7  &kp F8   &kp F9   &kp X            &kp PLUS    &kp N7    &kp N8   &kp N9    &kp ASTRK       &trans
//    &trans   &kp F11         &kp F1  &kp F2   &kp F3   &kp X            &kp MINUS   &kp N4    &kp N5   &kp N6    &kp SLASH       &trans
//    &trans   &mt LSHIFT F10  &kp F4  &kp F5   &kp F6   &kp X            &kp DOT     &kp N1    &kp N2   &kp N3    &mt RSHIFT N0   &trans
//                                     &trans   &trans   &trans           &trans      &trans    &trans
//                         >;
                        bindings = <
   &trans   &kp F12       &kp F7  &kp F8   &kp F9   &kp X            &kp PLUS    &kp N7    &kp N8   &kp N9    &kp ASTRK     &trans
   &trans   &kp F11       &kp F1  &kp F2   &kp F3   &kp X            &kp N0      &kp N1    &kp N2   &kp N3    &kp SLASH     &trans
   &trans   &mt LSFT F10  &kp F4  &kp F5   &kp F6   &kp X            &kp MINUS   &kp N4    &kp N5   &kp N6    &mt RSFT DOT  &trans
                                  &trans   &trans   &trans           &trans      &trans    &trans
                        >;

                };

                sym_layer {
// /----------------------------------------------------------------\       /-----------------------------------------------------------------\
// |                |   '   |   <    |   >    |    "     |    .     |       |    &    |    _?    |    [    |    ]    |    %     |             |
// |----------------+-------+--------+--------+----------+----------|       |---------+----------+---------+---------+----------+-------------|
// |                |   !   |   -    |   +    |    =     |    #     |       |    |    |    :     |    (    |    )    |    ?     |             |
// |----------------+-------+--------+--------+----------+----------|       |---------+----------+---------+---------+----------+-------------|
// |                |   ^   |   /    |   *    |    \?    |    ../?  |       |    ~    |    $     |    {    |    }    |    @     |             |
// \---------------------------------+--------+----------+----------+       |---------+----------+---------+----------------------------------/
//                                   |        |          |          |       |         |          |         |
//                                   \--------+----------+----------/       \---------+----------+---------/

                        bindings = <
   &trans   &kp SQT    &kp LT      &kp GT     &kp DQT    &kp DOT           &kp AMPS    &kp UNDER   &kp LBKT    &kp RBKT    &kp PRCNT   &trans
   &trans   &kp EXCL   &kp MINUS   &kp PLUS   &kp EQUAL  &kp HASH          &kp PIPE    &kp CM_COLN &kp LPAR    &kp RPAR    &kp QMARK   &trans
   &trans   &kp CARET  &kp FSLH    &kp STAR   &kp BSLH   &dup              &kp TILDE   &kp DLLR    &kp LBRC    &kp RBRC    &kp AT      &trans
                                   &trans     &trans     &trans            &trans      &trans      &trans
                        >;
                };

                nav_layer {
// /--------------------------------------------------------\       /--------------------------------------------------------------\
// |         | BT CLR |        |        |         |  BRI UP |       |  CLEFT |  VOL-  |   VOL+  |  CRIGHT |   MUTE   |             |
// |---------+--------+--------+--------+---------+---------|       |--------+--------+---------+---------+----------+-------------|
// |         |        |        |        |         |  BRI DN |       |  LEFT  |  DOWN  |    UP   |  RIGHT  |  INSERT  |             |
// |---------+--------+--------+--------+---------+---------|       |--------+--------+---------+---------+----------+-------------|
// |         |  BT 1  |  BT 2  |  BT 3  |  BT 4   |         |       |  CPWRD | PGDWN  |   PGUP  |  HOME   |   END    |             |
// \---------------------------+--------+---------+---------+       |--------+--------+---------+----------------------------------/
//                             |        |         |         |       |        |        |         |
//                             \--------+---------+---------/       \--------+--------+---------/

                        bindings = <
   &none   &bt BT_CLR    &none         &none         &none          &kp C_BRI_UP          &kp LC(LEFT)  &kp C_VOL_UP  &kp C_VOL_DN  &kp LC(RIGHT)  &kp C_MUTE   &none
   &none   &trans        &trans        &trans        &trans         &kp C_BRI_DN          &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT      &kp INS      &none
   &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &none                 &caps_word    &kp PG_DN     &kp PG_UP     &kp HOME       &kp END      &none
                                       &trans        &trans         &trans                &trans        &trans        &trans
                        >;
               };
        };
};
